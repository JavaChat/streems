apply(plugin: "java");

group = "com.github.fge"; // TODO: change!
description = "n-ary tree traversal using streams";
version = "0.1.0-SNAPSHOT";

def javaVersion = JavaVersion.VERSION_1_8;
sourceCompatibility = javaVersion;
targetCompatibility = javaVersion; // defaults to sourceCompatibility

repositories {
    mavenCentral();
}

dependencies {
    compile(group: "com.google.guava", name: "guava", version: "19.0");
    testCompile(group: "org.testng", name: "testng", version: "6.9.10") {
        exclude(group: "org.apache.ant", module: "ant");
        exclude(group: "com.google.inject", module: "guice");
        exclude(group: "junit", module: "junit");
        exclude(group: "org.beanshell", module: "bsh");
        exclude(group: "org.yaml", module: "snakeyaml");
    };
    testCompile(group: "org.mockito", name: "mockito-core", version: "1.10.19");
    testCompile(group: "org.assertj", name: "assertj-core", version: "3.3.0");
}

javadoc.options.links("http://docs.oracle.com/javase/8/docs/api/");
javadoc.options.links("http://docs.guava-libraries.googlecode.com/git-history/v19.0/javadoc/");

test {
    useTestNG() {
        useDefaultListeners = true;
    };
}

/*
 * Necessary to generate the source and javadoc jars
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources";
    from sourceSets.main.allSource;
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc";
    from javadoc.destinationDir;
}

artifacts {
    archives jar;
    archives sourcesJar;
    archives javadocJar;
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.12";
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip";
}

